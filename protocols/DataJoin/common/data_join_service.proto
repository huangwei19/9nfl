

syntax = "proto3";
import "DataJoin/common/common.proto";
import "google/protobuf/empty.proto";

package DataJoin.common;

message DataSourceRequest {
  DataSourceMeta data_source_meta = 1;
}

message DataSourceStatus {
  FLRole role = 1;
  DataSourceState state = 2;
}

enum SyncExampleIdState {
  UnSynced = 0;
  Syncing = 1;
  Synced = 2;
}

enum JoinExampleState {
  UnJoined = 0;
  Joining = 1;
  Joined = 2;
}

message SyncExampleIdRep {
  int64 rank_id = 1;
  SyncExampleIdState state = 2;
}

message JoinExampleRep {
  int64 rank_id = 1;
  JoinExampleState state = 2;
}

message RawDataManifest {
  int64 partition_id = 1;
  SyncExampleIdRep sync_example_id_rep = 2;
  JoinExampleRep join_example_rep = 3;
  bool finished = 4;
  int64 next_process_index = 5;
}

message RawDataMeta {
  string file_path = 1;
  int64 start_index = 2;
}

message RawDataFilePaths {
  repeated string file_paths = 1;
  bool dedup = 2;
}

message RawDataRequest {
  DataSourceMeta data_source_meta = 1;
  int64 rank_id = 2;
  int64 partition_id = 3;
  oneof msg {
    google.protobuf.Empty sync_example_id = 4;
    google.protobuf.Empty join_example = 5;
    google.protobuf.Empty finish_raw_data = 6;
    RawDataFilePaths raw_data_fpaths = 7;
  }
}

message RawDataResponse {
  Status status = 1;
  oneof msg {
    RawDataManifest manifest = 2;
    google.protobuf.Empty finished = 3;
  }
}

service DataJoinMasterService {
  rpc GetDataSource(google.protobuf.Empty) returns (DataSource) {}
  rpc GetDataSourceStatus(DataSourceRequest) returns (DataSourceStatus) {}
  rpc AbortDataSource(DataSourceRequest) returns (Status) {}
  rpc RequestJoinPartition(RawDataRequest) returns (RawDataResponse) {}
  rpc FinishJoinPartition(RawDataRequest) returns (Status) {}
  rpc QueryRawDataManifest(RawDataRequest) returns (RawDataManifest) {}
  rpc FinishRawData(RawDataRequest) returns (Status) {}
  rpc AddRawData(RawDataRequest) returns (Status) {}
}

message DataBlockMeta {
  string block_id = 1;
  int64 partition_id = 2;
  uint32 file_version = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  repeated bytes example_ids = 6;
  int64 leader_start_index = 7;
  int64 leader_end_index = 8;
  int64 follower_restart_index = 9;
  int64 data_block_index = 10;
}

message StartPartitionRequest {
  DataSourceMeta data_source_meta = 1;
  int64 rank_id = 2;
  int64 partition_id = 3;
}

message StartPartitionResponse {
  Status status = 1;
  int64 next_index = 2;
  bool finished = 3;
}

message LiteExampleIds {
  int64 partition_id = 1;
  int64 begin_index = 2;
  repeated bytes example_id = 3;
  repeated int64 event_time = 4;
  bool finished = 5;
}

message SyncContent {
  oneof msg {
    DataBlockMeta data_block_meta = 1;
    LiteExampleIds lite_example_ids = 2;
  }
}

message SyncPartitionRequest {
  // DataSourceMeta data_source_meta = 1;
  int64 rank_id = 1;
  int64 partition_id = 2;
  // serialization of SyncContent
  bytes content_bytes = 3;
  // if compressed is set true, we use the gzip compress sync content
  bool compressed = 4;
}

message FinishPartitionRequest {
  DataSourceMeta data_source_meta = 1;
  int64 rank_id = 2;
  int64 partition_id = 3;
}

message FinishPartitionResponse {
  Status status = 1;
  bool finished = 2;
}

service DataJoinService {
  rpc StartPartition(StartPartitionRequest)
      returns (StartPartitionResponse) {}
  rpc SyncPartition(SyncPartitionRequest) returns (Status) {}
  rpc FinishPartition(FinishPartitionRequest)
      returns (FinishPartitionResponse) {}
}

message LastDumpedExampleIdMeta {
  string file_path = 1;
  int64 start_index = 2;
  int64 end_index = 3;
  int64 process_index = 4;
}

message DumpedExampleIdAnchor {
  oneof msg {
    LastDumpedExampleIdMeta last_meta = 1;
    google.protobuf.Empty undumped = 2;
  }
}

message RawDataOptions {
  string raw_data_iter = 1;
  // only support three compressed, ''(UnCompressed), ZLIB, GZIP
  string compressed_type = 2;
}

message ExampleJoinerOptions {
  string example_joiner = 1;
  int64 min_matching_window = 2;
  int64 max_matching_window = 3;
  int64 dump_data_block_time_span = 4;
  int64 dump_data_block_threshold = 5;
}

message ExampleIdDumpOptions {
  int64 example_id_dump_interval = 1;
  int64 example_id_dump_threshold = 2;
}

message DataJoinOptions {
  bool use_mock_etcd = 1;
  RawDataOptions raw_data_options = 2;
  ExampleJoinerOptions example_joiner_options = 3;
  ExampleIdDumpOptions example_id_dump_options = 4;
}

message DataJoinMasterOptions {
  bool use_mock_etcd = 1;
}
